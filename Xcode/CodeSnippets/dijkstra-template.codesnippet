<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>dijkstra template</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>ClassImplementation</string>
		<string>CodeBlock</string>
		<string>StringOrComment</string>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>typealias Graph = [Vertex]
typealias Vertex = [Edge]
struct Edge {
    let next, weight: Int
}

struct Dijkstra {
    /// 計算中の頂点の状態
    struct VertexState: Comparable {
        /// 頂点の index
        let vertex: Int
        /// 始点からの距離
        let distance: Int

        static func &lt; (lhs: Self, rhs: Self) -&gt; Bool {
            lhs.distance &lt; rhs.distance
        }
    }
    typealias Distance = Int
    static func solve(graph: Graph, start: Int, end: Int) -&gt; Distance {
        /// 通った頂点の始点からの距離
        /// 初期値は始点(0) とその他 (INF) で埋める
        var distance = [Int](repeating: Int.max, count: graph.count)
        distance[start] = .zero
        /// 使用済みでない頂点集合
        /// 初期値は始点(0)のみ
        /// このヒープがゼロ個になるまで `heap.pop()` を回す
        var heap = BinaryHeap&lt;VertexState&gt;()
        heap.insert(.init(vertex: start, distance: .zero))

        while let state = heap.pop() {
            guard state.distance &lt;= distance[state.vertex] else {
                continue // この経路は最短距離を更新できないゴミ
            }
            for edge in graph[state.vertex] {
                /// 現在の距離に `Edge.weight` (重み)を加算して、次の頂点への最短距離が更新されるか確認
                let newDistance = state.distance + edge.weight
                if distance[edge.next] &gt; newDistance {
                    distance[edge.next] = newDistance
                    heap.insert(.init(vertex: edge.next, distance: newDistance))
                }
            }
        }

        return distance[end]
    }
}

struct BinaryHeap&lt;Value: Comparable&gt; {
    var heap = [Value]()

    mutating func insert(_ v: Value) {
        var k = heap.count
        heap.append(v)
        while k &gt; 0 {
            let p = (k - 1) / 2
            if heap[p] &gt; heap[k] {
                heap.swapAt(k, p)
                k = p
            } else {
                break
            }
        }
    }

    mutating func pop() -&gt; Value? {
        guard let result = heap.first else { return nil }
        heap.swapAt(0, heap.endIndex - 1)
        heap.removeLast()
        var k = 0
        while true {
            var l = k
            for c in [k * 2 + 1, k * 2 + 2] where c &lt; heap.count &amp;&amp; heap[l] &gt; heap[c] {
                l = c
            }
            if k == l {
                break
            }
            heap.swapAt(k, l)
            k = l
        }
        return result
    }
}

let vertexCount = &lt;#N#&gt;
let edgeCount = &lt;#M#&gt;
let start = &lt;#X#&gt;
let end = &lt;#Y#&gt;

/// 「頂点A から 頂点B まで重さW がかかる辺が M 個与えられる」という場合に `Graph` を構築する例
var graph = Graph(repeating: [], count: vertexCount)
(0..&lt;edgeCount).forEach { _ in
    let (A, B, W): (Int, Int, Int) = { let l = readLine()!.split(separator: " ").map(String.init); return (Int(l[0])!, Int(l[1])!, Int(l[2])!) }()

    graph[A-1].append(.init(next: B-1, weight: W))
    // 無向グラフは両方の頂点に辺を追加
    graph[B-1].append(.init(next: A-1, weight: W))
}

let distance = Dijkstra.solve(graph: graph, start: start - 1, end: end - 1)
print(distance)
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>660E2672-50DD-4811-A663-A05F33D4E5CB</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>ダイクストラ・テンプレート</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
